<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
  "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
  "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">

  <module name="SuppressionFilter">
    <property name="file" value="${checkstyle.suppressions.file}" default="/config/checkstyle-suppressions.xml"/>
  </module>

  <!--REMOVE?<module name="SuppressionCommentFilter"/> -->

  <module name="FileTabCharacter"/>
  <module name="JavadocPackage"/>

  <module name="RegexpSingleline">
    <property name="format" value="^(\s|\*)*\s+COPYRIGHT\s+Ericsson\s+[0-9]+\s*$"/>
    <property name="minimum" value="1"/>
    <property name="maximum" value="1"/>
    <property name="message" value="missing copyright header"/>
  </module>

  <module name="RegexpSingleline">
    <property name="format" value="NOPMD"/>
    <property name="ignoreCase" value="true"/>
    <property name="message" value="use of NOPMD is prohibited"/>
  </module>

  <module name="RegexpSingleline">
    <property name="format" value="(@(version)|\(non-Javadoc\)|@(author\s))"/>
    <property name="ignoreCase" value="true"/>
    <property name="message" value="unmaintainable Javadoc tags: @version, (non-Javadoc), @author"/>
  </module>

  <module name="RegexpSingleline">
    <property name="format" value="Auto-generated method stub"/>
    <property name="message" value="IDE-generated TODO - Auto-generated method stub"/>
  </module>

  <module name="RegexpMultiline">
    <property name="severity" value="${checkstyle.NonUnixLineSeparator.severity}" default="ignore"/>
    <property name="format" value="\r"/>
    <property name="message" value="non-Unix line separator"/>
  </module>

  <!-- No trailing whitespace -->
  <module name="RegexpSingleline">
    <property name="severity" value="${checkstyle.NoTrailingWhitespace.severity}" default="error"/>
    <property name="format" value="\s+$"/>
    <property name="message" value="Line has trailing whitespace."/>
  </module>

  <!-- Prohibit consecutive empty lines (except the lines after package/import) -->
  <module name="RegexpMultiline">
    <property name="format" value="\n *(?!package )(?!import )[^\n]+\n{3,}"/>
    <property name="message" value="two or more consecutive empty lines"/>
  </module>
  <!-- Prohibit an empty after { or before } -->
  <module name="RegexpMultiline">
    <property name="format" value="\n\n\s+\}[^\n]{0,10}\n"/>
    <property name="message" value="an empty line before '}'"/>
  </module>
  <module name="RegexpMultiline">
    <property name="format" value="\n\s+[^\n]{1,8}\{\n\n"/>
    <property name="message" value="an empty line after a short line that ends with '{'"/>
  </module>

  <module name="NewlineAtEndOfFile">
    <property name="severity" value="${checkstyle.NewlineAtEndOfFile.severity}" default="ignore"/>
    <property name="lineSeparator" value="${checkstyle.NewlineAtEndOfFile.lineSeparator}" default="system"/>
  </module>

  <module name="SuppressWarningsFilter"/>

  <module name="TreeWalker">

    <module name="FileContentsHolder"/>
    <module name="SuppressWarningsHolder"/>

    <module name="LineLength">
      <property name="max" value="150"/>
    </module>

    <module name="NoLineWrap"/>

    <module name="EmptyLineSeparator">
      <property name="allowNoEmptyLineBetweenFields" value="true"/>
    </module>

    <module name="WhitespaceAfter"/>

    <module name="NoWhitespaceAfter">
      <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
      <property name="allowLineBreaks" value="true"/>
      <property name="severity" value="error"/>
    </module>

    <module name="NoWhitespaceBefore">
      <property name="tokens" value="SEMI, DOT, POST_DEC, POST_INC"/>
      <property name="allowLineBreaks" value="true"/>
      <property name="severity" value="error"/>
    </module>

    <module name="WhitespaceAround">
      <property name="tokens"
        value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND, DEC, INC"/>
      <property name="allowEmptyConstructors" value="true"/>
      <property name="allowEmptyMethods" value="true"/>
      <property name="allowEmptyTypes" value="true"/>
      <property name="allowEmptyLoops" value="true"/>
    </module>

    <module name="Indentation">
      <property name="basicOffset" value="4"/>
      <property name="braceAdjustment" value="0"/>
      <property name="caseIndent" value="4"/>
      <property name="throwsIndent" value="8"/>
      <property name="lineWrappingIndentation" value="8"/>
      <property name="arrayInitIndent" value="4"/>
    </module>

    <module name="SeparatorWrap">
      <property name="tokens" value="DOT"/>
      <property name="option" value="nl"/>
    </module>

    <module name="EmptyBlock">
      <property name="option" value="text"/>
    </module>
    <module name="LeftCurly"/>
    <module name="RightCurly"/>
    <module name="NeedBraces"/>
    <module name="AvoidNestedBlocks">
      <property name="allowInSwitchCase" value="true"/>
    </module>

    <module name="MissingOverride"/>
    <module name="MissingDeprecated"/>

    <module name="PackageAnnotation"/>
    <module name="PackageDeclaration"/>

    <module name="ImportOrder">
      <property name="groups" value="/^javax?\./,org,com"/>
      <property name="ordered" value="true"/>
      <property name="separated" value="true"/>
      <property name="option" value="top"/>
    </module>
    <module name="AvoidStarImport">
      <property name="severity" value="${checkstyle.AvoidStarImport.severity}" default="ignore"/>
      <property name="allowClassImports" value="false"/>
      <property name="allowStaticMemberImports" value="false"/>
    </module>
    <module name="RedundantImport"/>
    <module name="UnusedImports"/>

    <module name="OuterTypeFilename"/>
    <module name="OuterTypeNumber"/>
    <module name="OneTopLevelClass"/>
    <module name="FinalClass"/>
    <module name="InterfaceIsType"/>

    <module name="MutableException"/>
    <module name="InnerTypeLast"/>
    <module name="DesignForExtension">
      <property name="severity" value="ignore"/>
    </module>
    <module name="HideUtilityClassConstructor"/>

    <module name="ExplicitInitialization"/>
    <module name="DefaultComesLast"/>
    <module name="UnnecessaryParentheses"/>
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>
    <module name="NoFinalizer"/>
    <module name="SuperFinalize"/>
    <module name="CovariantEquals"/>
    <module name="EmptyStatement"/>
    <module name="EqualsHashCode"/>
    <module name="FinalLocalVariable">
      <property name="tokens" value="VARIABLE_DEF,PARAMETER_DEF"/>
    </module>

    <module name="StringLiteralEquality"/>
    <module name="ModifierOrder"/>
    <module name="RedundantModifier"/>
    <module name="GenericWhitespace"/>
    <module name="EmptyForInitializerPad"/>
    <module name="EmptyForIteratorPad"/>
    <module name="MethodParamPad"/>
    <module name="ParenPad"/>
    <module name="TypecastParenPad"/>
    <module name="DeclarationOrder"/>
    <!--<module name="OverloadMethodsDeclarationOrder"/>-->
    <!--<module name="VariableDeclarationUsageDistance"/>-->
    <module name="MultipleVariableDeclarations"/>
    <module name="HiddenField">
      <property name="tokens" value="VARIABLE_DEF"/>
    </module>
    <module name="OneStatementPerLine"/>
    <module name="FallThrough"/>
    <module name="DefaultComesLast"/>
    <module name="UpperEll"/>
    <module name="ArrayTypeStyle"/>

    <module name="ParameterName">
      <property name="format" value="^(?!arg[0-9])[_a-z][_a-zA-Z0-9]*$"/>
    </module>
    <module name="StaticVariableName"/>
    <module name="TypeName"/>
    <module name="ConstantName">
      <property name="severity" value="${checkstyle.ConstantName.severity}" default="info"/>
    </module>
    <module name="LocalFinalVariableName"/>
    <module name="LocalVariableName"/>
    <module name="MemberName"/>
    <module name="MethodName">
      <property name="format" value="^[a-z][a-zA-Z0-9_]*$"/>
    </module>
    <module name="MethodTypeParameterName">
      <property name="format" value="^[A-Z0-9]+$"/>
    </module>
    <module name="PackageName">
      <property name="format" value="^[a-z]+(\.[a-z][a-z]*)*$"/>
      <message key="name.invalidPattern" value="Package name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="AbbreviationAsWordInName">
      <property name="severity" value="${checkstyle.AbbreviationAsWordInName.severity}" default="warning"/>
      <property name="ignoreFinal" value="false"/>
      <property name="allowedAbbreviationLength" value="1"/>
      <property name="allowedAbbreviations" value="IT"/>
    </module>

    <!-- JavaDoc specific rules.
      The scope is treated inclusively (as javadoc does):
      'package' means all 'package', 'protected' and 'public' methods/fields/classes.
      The valid options are: nothing, public, protected, package, private, anoninner.
    -->

    <module name="JavadocType">
      <property name="scope" value="package"/>
    </module>

    <module name="JavadocMethod">
      <property name="severity" value="ignore" default="ignore"/>
      <property name="scope" value="protected"/>
      <property name="allowUndeclaredRTE" value="true"/>
      <property name="suppressLoadErrors" value="true"/>
      <property name="allowThrowsTagsForSubclasses" value="true"/>
    </module>

    <module name="JavadocVariable">
      <property name="severity" value="ignore" default="ignore"/>
      <property name="scope" value="protected"/>
    </module>

    <module name="JavadocStyle">
      <property name="scope" value="protected"/>
      <property name="checkFirstSentence" value="true"/>
      <property name="checkEmptyJavadoc" value="true"/>
      <property name="checkHtml" value="true"/>
      <property name="tokens" value="INTERFACE_DEF, CLASS_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
    </module>

    <module name="SummaryJavadocCheck">
      <property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
    </module>

    <module name="AtclauseOrder">
      <property name="tagOrder" value="@param, @return, @throws, @deprecated, @see, @since"/>
      <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
    </module>

    <module name="NonEmptyAtclauseDescription"/>
    <module name="JavadocTagContinuationIndentation"/>
    <module name="SingleLineJavadoc"/>

    <module name="JavadocParagraph">
      <property name="severity" value="${checkstyle.JavadocParagraph.severity}" default="ignore"/>
    </module>

  </module>

</module>

